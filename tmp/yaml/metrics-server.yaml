NAME: metrics-server
LAST DEPLOYED: Sun Mar 14 17:15:29 2021
NAMESPACE: monitoring
STATUS: deployed
REVISION: 1
USER-SUPPLIED VALUES:
affinity: {}
apiService:
  create: true
args:
- --kubelet-insecure-tls
- --kubelet-preferred-address-types=InternalIP
dummy: value
exportLogs: enabled
extraContainers: []
extraVolumeMounts: []
extraVolumes: []
hostNetwork:
  enabled: true
image:
  pullPolicy: IfNotPresent
  repository: k8s.gcr.io/metrics-server-amd64
  tag: v0.3.6
imagePullSecrets: []
livenessProbe:
  httpGet:
    path: /healthz
    port: https
    scheme: HTTPS
  initialDelaySeconds: 20
nodeSelector: {}
podAnnotations: {}
podDisruptionBudget:
  enabled: false
  maxUnavailable: null
  minAvailable: null
podLabels: {}
rbac:
  create: true
  pspEnabled: false
readinessProbe:
  httpGet:
    path: /healthz
    port: https
    scheme: HTTPS
  initialDelaySeconds: 20
replicas: 1
resources: {}
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - all
  readOnlyRootFilesystem: true
  runAsGroup: 10001
  runAsNonRoot: true
  runAsUser: 10001
service:
  annotations: {}
  labels: {}
  port: 443
  type: ClusterIP
serviceAccount:
  create: true
  name: null
tolerations: []

COMPUTED VALUES:
affinity: {}
apiService:
  create: true
args:
- --kubelet-insecure-tls
- --kubelet-preferred-address-types=InternalIP
dummy: value
exportLogs: enabled
extraContainers: []
extraVolumeMounts: []
extraVolumes: []
hostNetwork:
  enabled: true
image:
  pullPolicy: IfNotPresent
  repository: k8s.gcr.io/metrics-server-amd64
  tag: v0.3.6
imagePullSecrets: []
livenessProbe:
  httpGet:
    path: /healthz
    port: https
    scheme: HTTPS
  initialDelaySeconds: 20
nodeSelector: {}
podAnnotations: {}
podDisruptionBudget:
  enabled: false
podLabels: {}
rbac:
  create: true
  pspEnabled: false
readinessProbe:
  httpGet:
    path: /healthz
    port: https
    scheme: HTTPS
  initialDelaySeconds: 20
replicas: 1
resources: {}
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - all
  readOnlyRootFilesystem: true
  runAsGroup: 10001
  runAsNonRoot: true
  runAsUser: 10001
service:
  annotations: {}
  labels: {}
  port: 443
  type: ClusterIP
serviceAccount:
  create: true
tolerations: []

HOOKS:
---
# Source: metrics-server/templates/tests/test-version.yaml
apiVersion: v1
kind: Pod
metadata:
  name: metrics-server-test
  labels:
    app: metrics-server
    chart: metrics-server-2.11.1
    release: metrics-server
    heritage: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: wget
    image: busybox
    command: ['/bin/sh']
    args:
    - -c
    - 'wget -qO- https://metrics-server:443/version | grep -F v0.3.6'
  restartPolicy: Never
MANIFEST:
---
# Source: metrics-server/templates/metrics-server-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-server
  namespace: monitoring
  labels:
    app: metrics-server
    chart: metrics-server-2.11.1
    release: metrics-server
    heritage: Helm
---
# Source: metrics-server/templates/aggregated-metrics-reader-cluster-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:metrics-server-aggregated-reader
  labels:
    app: metrics-server
    chart: metrics-server-2.11.1
    release: metrics-server
    heritage: Helm
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods","nodes"]
    verbs: ["get", "list", "watch"]
---
# Source: metrics-server/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:metrics-server
  labels:
    app: metrics-server
    chart: metrics-server-2.11.1
    release: metrics-server
    heritage: Helm
rules:
  - apiGroups:
    - ""
    resources:
      - pods
      - nodes
      - nodes/stats
      - namespaces
    verbs:
      - get
      - list
      - watch
---
# Source: metrics-server/templates/auth-delegator-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: metrics-server:system:auth-delegator
  labels:
    app: metrics-server
    chart: metrics-server-2.11.1
    release: metrics-server
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: metrics-server
    namespace: monitoring
---
# Source: metrics-server/templates/metrics-server-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:metrics-server
  labels:
    app: metrics-server
    chart: metrics-server-2.11.1
    release: metrics-server
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
  - kind: ServiceAccount
    name: metrics-server
    namespace: monitoring
---
# Source: metrics-server/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: metrics-server-auth-reader
  namespace: kube-system
  labels:
    app: metrics-server
    chart: metrics-server-2.11.1
    release: metrics-server
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: metrics-server
    namespace: monitoring
---
# Source: metrics-server/templates/metric-server-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: metrics-server
  namespace: monitoring
  labels:
    app: metrics-server
    chart: metrics-server-2.11.1
    release: metrics-server
    heritage: Helm
  annotations:
    {}
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: https
  selector:
    app: metrics-server
    release: metrics-server
  type: ClusterIP
---
# Source: metrics-server/templates/metrics-server-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-server
  namespace: monitoring
  labels:
    app: metrics-server
    chart: metrics-server-2.11.1
    release: metrics-server
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: metrics-server
      release: metrics-server
  replicas: 1
  template:
    metadata:
      labels:
        app: metrics-server
        exportLogs: enabled
        release: metrics-server
    spec:
      serviceAccountName: metrics-server
      hostNetwork: true
      containers:
        - name: metrics-server
          image: "k8s.gcr.io/metrics-server-amd64:v0.3.6"
          imagePullPolicy: IfNotPresent
          command:
            - /metrics-server
            - --cert-dir=/tmp
            - --logtostderr
            - --secure-port=8443
            - --kubelet-insecure-tls
            - --kubelet-preferred-address-types=InternalIP
          ports:
          - containerPort: 8443
            name: https
          livenessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            readOnlyRootFilesystem: true
            runAsGroup: 10001
            runAsNonRoot: true
            runAsUser: 10001
          volumeMounts:
          - name: tmp
            mountPath: /tmp
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      volumes:
      - name: tmp
        emptyDir: {}
---
# Source: metrics-server/templates/metrics-api-service.yaml
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
  labels:
    app: metrics-server
    chart: metrics-server-2.11.1
    release: metrics-server
    heritage: Helm
spec:
  service:
    name: metrics-server
    namespace: monitoring
  group: metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100

NOTES:
The metric server has been deployed. 

In a few minutes you should be able to list metrics using the following
command:

  kubectl get --raw "/apis/metrics.k8s.io/v1beta1/nodes"
